import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'java'

group 'me.masstrix'
version '2.2'

sourceCompatibility = 16

// Sets up project settings
ext {
    buildVersion = -1
    fileSuffix = ""
    isSnapshot = true
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
}

dependencies {
    // TODO fix testCompile not working
    //testCompile group: 'junit', name: 'junit', version: '5.7.2'
    compileOnly 'org.spigotmc:spigot:1.17-R0.1-SNAPSHOT'
    compileOnly 'me.clip:placeholderapi:2.10.6'
}

/**
 * Reads and increments the build version of the plugin in version.properties.
 * */
task readVersionProp {
    // Load the version properties and increment it
    def versionFile = file('version.properties')

    if (!versionFile.exists()) {
        BufferedWriter writer = versionFile.newWriter()
        writer.write("BUILD_VERSION=0")
        writer.flush()
        writer.close()
    }

    // Read the version file.
    if (versionFile.canRead()) {
        Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionFile))

        if (versionProps.containsKey("BUILD_VERSION")) {
            buildVersion = Integer.parseInt(versionProps['BUILD_VERSION'] as String) + 1
        }

        versionProps['BUILD_VERSION'] = buildVersion.toString()
        versionProps.store(versionFile.newWriter(), null)
    } else {
        throw new GradleException("Could not read version.properties!")
    }
}

task compileForSnapshot() {
    doFirst {
        isSnapshot = true
        fileSuffix = "-snapshot"
        println 'Building snapshot...'
    }
    finalizedBy('makeJar')
}

task compileForRelease() {
    doFirst {
        isSnapshot = false
        fileSuffix = ""
        println 'Building release...'
    }
    finalizedBy('makeJar')
}

/**
 * Compiles the plugin and copies the jar into a directory for a test server.
 * */
task compileForTestServer('type': Copy) {
    from jar
    // Define here where you want the jar to be copied to when it's run.
    into '/Users/matthew/Documents/Development/Minecraft/Plugins/Test Servers/latest/plugins'
}

// Sets the name of the output jar to follow the formatting of name-version.jar
jar {
    doFirst {
        archiveFileName = "${project.name}-${project.version}${fileSuffix}.jar"
    }
}

// Replaces tokens in resource files
processResources {
    doFirst {
        filter(ReplaceTokens, tokens: [VERSION: project.version,
                                       BUILD: buildVersion.toString(),
                                       IS_SNAPSHOT: isSnapshot.toString()])
    }
}

// Package sources into a jar
task makeJar {
    dependsOn(clean, jar)
}

// Updates the javadocs for the project.
//task updateJavaDoc('type': Copy) {
//    project.delete(files('docs'))
//    from javadoc
//    into 'docs'
//}